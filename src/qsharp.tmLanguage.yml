name: qsharp
scopeName: source.qsharp
fileTypes: [qs]
patterns:
- include: '#comments'
- include: '#library'
- include: '#operations'
- include: '#types'
- include: '#constants'
- include: '#strings'
- include: '#callable-invocation'
- include: '#callable-declaration'

repository:
  comments:
    patterns: 
      - name: comment.line.double-slash
        match: \/\/.*$
      - name: comment.documentation
        match: \/\/\/.*$

  operations:
    patterns:
      - name: keyword.other.qsharp
        match: \b(namespace|open|as|internal|newtype|body|(a|A)djoint|(c|C)ontrolled|self|auto|distribute|invert|intrinsic)\b

  types:
    patterns:
      - name: storage.type.qsharp
        match: \b(Int|BigInt|Double|Bool|Qubit|Pauli|Result|Range|String|Unit|Ctl|Adj|is)\b
      - include: '#type-array-suffix'

  library:
    patterns:
      - name: support.function.quantum.qsharp
        match: \b(I|X|Y|Z|H|HY|S|T|SWAP|CNOT|CCNOT|MultiX|R|RFrac|Rx|Ry|Rz|R1|R1Frac|Exp|ExpFrac|Measure|M|MultiM)\b

  constants:
    patterns:
      - name: constant.language.qsharp
        match: \b(true|false|Pauli(I|X|Y|Z)|One|Zero)\b

  strings:
    patterns:
      - name: string.quoted.double.qsharp
        begin: "(\\$|)\""
        end: "\""
        patterns:
          - name: constant.character.escape.qsharp
            match: \\.

  callable-invocation: 
    begin: |-
      (?x)
      (?:(\.)\s*)?                                        # preceding dot?
      ([_[:alpha:]][_[:alnum:]]*)\s*                      # callable name
      (?<type_args>\s*<([^<>]|\g<type_args>)+>\s*)?\s*    # type arguments
      (?=\()                                              # open parentheses of argument list
    beginCaptures:
        '1':
          name: punctuation.accessor.qsharp
        '2':
          name: entity.name.callable.qsharp
        '3': 
          patterns:
            - include: '#type-parameter-list'
    end: (?<=\))
    patterns:
      - include: '#argument-list'

  callable-declaration: 
    begin: |-
      (?x)
      \b(operation|function)\b\s+
      ([_[:alpha:]][_[:alnum:]]*)\s*                      # callable name
      (?<type_args>\s*<([^<>]|\g<type_args>)+>\s*)?\s*    # type arguments
      (?=\()                                              # open parentheses of argument list
    beginCaptures:
        '1':
          name: keyword.other.callable.qsharp
        '2':
          name: entity.name.callable.qsharp
        '3': 
          patterns:
            - include: '#type-parameter-list'
    end: (?<=\))
    patterns:
        - include: '#parameter-list'

  type-parameter-list:
    begin: \<
    beginCaptures:
      '0':
        name: punctuation.definition.typeparameters.begin.qsharp
    end: \>
    endCaptures:
      '0':
        name: punctuation.definition.typeparameters.end.qsharp  
    patterns:
      - match: (@?'[_[:alpha:]][_[:alnum:]]*)\b
        captures:
          '1': 
            name: entity.name.type.type-parameter.qsharp
      - include: '#punctuation-comma'

  argument-list:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.qsharp }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.qsharp }
    patterns:
    - include: '#argument'
    - include: '#punctuation-comma'

  parameter-list:
    begin: (\()
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.qsharp }
    end: (\))
    endCaptures:
      '0': { name: punctuation.parenthesis.close.qsharp }
    patterns:
    - include: '#parameter'
    - include: '#punctuation-comma'

  punctuation-comma:
    name: punctuation.separator.comma.qsharp
    match: ','

  identifier:
    name: variable.other.readwrite.qsharp
    match: '@?[_[:alpha:]][_[:alnum:]]*'

  argument:
    patterns:
      - include: '#callable-invocation'
      - include: '#strings'
      - include: '#identifier'
      - include: '#constants'
      - include: '#types'
      - include: '#library'

  parameter:
    begin: (@?[_[:alpha:]][_[:alnum:]]*)\s*(:)
    beginCaptures:
      '1': { name: entity.name.variable.parameter.qsharp }
      '2': { name: punctuation.separator.colon.qsharp }
    end: (?=(,|\)|\]))
    patterns:
      - include: '#constants'
      - include: '#types'
      - include: '#library'

  type-array-suffix:
    begin: \[
    beginCaptures:
      '0': { name: punctuation.squarebracket.open.qsharp }
    end: \]
    endCaptures:
      '0': { name: punctuation.squarebracket.close.qsharp }
    patterns:
    - include: '#punctuation-comma'