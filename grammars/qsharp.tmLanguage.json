{
	"name": "qsharp",
	"scopeName": "source.qsharp",
	"fileTypes": [
		"qs"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#namespace-declaration"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#library"
		},
		{
			"include": "#operations"
		},
		{
			"include": "#types"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#callable-invocation"
		},
		{
			"include": "#callable-declaration"
		},
		{
			"include": "#udt-declaration"
		},
		{
			"include": "#array-creation-expression"
		},
		{
			"include": "#local-declaration"
		}
	],
	"repository": {
		"literals": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#result-literal"
				},
				{
					"include": "#pauli-literal"
				},
				{
					"include": "#numeric-literal"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "(^\\s+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.qsharp"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"name": "comment.block.documentation.qsharp",
							"begin": "(?<!/)///(?!/)",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.qsharp"
								}
							},
							"end": "(?=$)"
						},
						{
							"name": "comment.line.double-slash.qsharp",
							"begin": "(?<!/)//(?:(?!/))",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.qsharp"
								}
							},
							"end": "(?=$)"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.qsharp",
					"match": "\\b(use|using|borrow|borrowing|set|if|elif|else|repeat|until|fixup|for|in|while|return|fail|within|apply)\\b"
				},
				{
					"name": "keyword.other.qsharp",
					"match": "\\b(new|not|and|or|w\\/)\\b"
				},
				{
					"comment": "C# reserved words which can't be used in Q#",
					"name": "invalid.illegal.qsharp",
					"match": "\\b(abstract|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double)\\b\n\\b(enum|event|explicit|extern|finally|fixed|float|foreach|goto|implicit|int|interface|lock|long)\\b\n\\b(null|object|operator|out|override|params|private|protected|public|readonly|ref|sbyte|sealed|short|sizeof|stackalloc)\\b\n\\b(static|string|struct|switch|this|throw|try|typeof|unit|ulong|unchecked|unsafe|ushort|virtual|void|volatile)\\b"
				}
			]
		},
		"operations": {
			"patterns": [
				{
					"name": "keyword.other.qsharp",
					"match": "\\b(as|internal|body|(a|A)djoint|(c|C)ontrolled|self|auto|distribute|invert|intrinsic)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.qsharp",
					"match": "\\b(Int|BigInt|Double|Bool|Qubit|Pauli|Result|Range|String|Unit|Ctl|Adj|is)\\b"
				},
				{
					"include": "#type-array-suffix"
				}
			]
		},
		"library": {
			"patterns": [
				{
					"name": "support.function.quantum.qsharp",
					"match": "\\b(I|X|Y|Z|H|HY|S|T|SWAP|CNOT|CCNOT|MultiX|R|RFrac|Rx|Ry|Rz|R1|R1Frac|Exp|ExpFrac|Measure|M|MultiM)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.qsharp",
					"begin": "(\\$|)\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.qsharp",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"namespace-declaration": {
			"begin": "\\b(namespace)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.namespace.qsharp"
				}
			},
			"end": "(?<=\\})",
			"patterns": [
				{
					"name": "entity.name.type.namespace.qsharp",
					"match": "[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-accessor"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.qsharp"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.qsharp"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#library"
						},
						{
							"include": "#operations"
						},
						{
							"include": "#types"
						},
						{
							"include": "#literals"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#callable-invocation"
						},
						{
							"include": "#callable-declaration"
						},
						{
							"include": "#udt-declaration"
						},
						{
							"include": "#open-directive"
						},
						{
							"include": "#array-creation-expression"
						},
						{
							"include": "#local-declaration"
						}
					]
				}
			]
		},
		"callable-invocation": {
			"begin": "(?x)\n(?:(\\:\\:)\\s*)?                                      # preceding member access\n([_[:alpha:]][_[:alnum:]]*)\\s*                      # callable name\n(?<type_args>\\s*<([^<>]|\\g<type_args>)+>\\s*)?\\s*    # type arguments\n(?=\\()                                              # open parentheses of argument list",
			"beginCaptures": {
				"1": {
					"name": "punctuation.accessor.qsharp"
				},
				"2": {
					"name": "entity.name.function.qsharp"
				},
				"3": {
					"patterns": [
						{
							"include": "#type-parameter-list"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"callable-declaration": {
			"begin": "(?x)\n\\b(operation|function)\\b\\s+\n([_[:alpha:]][_[:alnum:]]*)\\s*                      # callable name\n(?<type_args>\\s*<([^<>]|\\g<type_args>)+>\\s*)?\\s*    # type arguments\n(?=\\()                                              # open parentheses of argument list",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.callable.qsharp"
				},
				"2": {
					"name": "entity.name.function.qsharp"
				},
				"3": {
					"patterns": [
						{
							"include": "#type-parameter-list"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#parameter-list"
				}
			]
		},
		"type-parameter-list": {
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.qsharp"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.qsharp"
				}
			},
			"patterns": [
				{
					"match": "('[_[:alpha:]][_[:alnum:]]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.type-parameter.qsharp"
						}
					}
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"argument-list": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.qsharp"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.qsharp"
				}
			},
			"patterns": [
				{
					"include": "#argument"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"parameter-list": {
			"begin": "(\\()",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.qsharp"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.qsharp"
				}
			},
			"patterns": [
				{
					"include": "#parameter"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.qsharp",
			"match": ","
		},
		"identifier": {
			"patterns": [
				{
					"match": "([_[:alpha:]][_[:alnum:]]*)(\\!*)?",
					"captures": {
						"1": {
							"name": "variable.other.readwrite.qsharp"
						},
						"2": {
							"name": "keyword.operator.unwrap.qsharp"
						}
					}
				}
			]
		},
		"argument": {
			"patterns": [
				{
					"include": "#callable-invocation"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#types"
				},
				{
					"include": "#library"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"parameter": {
			"begin": "([_[:alpha:]][_[:alnum:]]*)\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.variable.parameter.qsharp"
				},
				"2": {
					"name": "punctuation.separator.colon.qsharp"
				}
			},
			"end": "(?=(,|\\)|\\]))",
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#types"
				},
				{
					"include": "#library"
				}
			]
		},
		"type-array-suffix": {
			"begin": "\\b\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.open.qsharp"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.squarebracket.close.qsharp"
				}
			},
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#literals"
				}
			]
		},
		"udt-declaration": {
			"begin": "(?=\\bnewtype\\b)",
			"end": "(?<=\\)|;)",
			"patterns": [
				{
					"begin": "(?x)\n(newtype)\\b\\s+\n([_[:alpha:]][_[:alnum:]]*)",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.udt.qsharp"
						},
						"2": {
							"name": "entity.name.type.udt.qsharp"
						}
					},
					"end": "(?=\\())"
				},
				{
					"begin": "(?:\\s*=\\s*)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.parenthesis.open.qsharp"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.qsharp"
						}
					},
					"patterns": [
						{
							"include": "#literals"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#types"
						},
						{
							"include": "#library"
						}
					]
				},
				{
					"begin": "(?:\\s*=\\s*)",
					"end": "(?=;)",
					"patterns": [
						{
							"include": "#literals"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#types"
						},
						{
							"include": "#library"
						}
					]
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.qsharp",
					"match": "(?<!\\.)\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.qsharp",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"result-literal": {
			"patterns": [
				{
					"name": "constant.language.result.zero.qsharp",
					"match": "(?<!\\.)\\bZero\\b"
				},
				{
					"name": "constant.language.result.one.qsharp",
					"match": "(?<!\\.)\\bOne\\b"
				}
			]
		},
		"pauli-literal": {
			"patterns": [
				{
					"name": "constant.language.pauli.qsharp",
					"match": "\\b(Pauli(I|X|Y|Z))\\b"
				}
			]
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.qsharp",
			"match": "\\."
		},
		"open-directive": {
			"patterns": [
				{
					"begin": "\\b(open)\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.open.qsharp"
						}
					},
					"end": "(?=;)",
					"patterns": [
						{
							"begin": "\\b(as)\\s+(?<alias>[_[:alpha:]][_[:alnum:]]*)",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.alias.qsharp"
								},
								"2": {
									"name": "entity.name.type.alias.qsharp"
								}
							},
							"end": "(?=;)"
						},
						{
							"name": "entity.name.type.namespace.qsharp",
							"match": "[_[:alpha:]][_[:alnum:]]*"
						},
						{
							"include": "#punctuation-accessor"
						}
					]
				}
			]
		},
		"numeric-literal": {
			"name": "constant.numeric.decimal.qsharp",
			"match": "(?<!\\w)\\.?\\d(?:[0-9a-zA-Z_\\.])*"
		},
		"array-creation-expression": {
			"begin": "(?<!\\w)\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.open.qsharp"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.squarebracket.close.qsharp"
				}
			},
			"patterns": [
				{
					"begin": "\\b(size)\\s*(?=\\=)",
					"end": "(?=\\])",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.size.qsharp"
						}
					}
				},
				{
					"include": "#argument"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"local-declaration": {
			"begin": "(?x)\n(?:\\b(?:(let)|(mutable))\\b\\s*)\n([_[:alpha:]][_[:alnum:]]*)\\b\\s*\n(?=;|=|\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.let.qsharp"
				},
				"2": {
					"name": "keyword.other.mutable.qsharp"
				},
				"3": {
					"name": "entity.name.variable.local.qsharp"
				}
			},
			"end": "(?=;|\\))",
			"patterns": [
				{
					"include": "#variable-initializer"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=|>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.qsharp"
				}
			},
			"end": "(?=[,\\)\\];}])",
			"patterns": [
				{
					"include": "#callable-invocation"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#types"
				},
				{
					"include": "#library"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#identifier"
				},
				{
					"include": "#array-creation-expression"
				}
			]
		}
	}
}